version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-weathernotify}
      - DB_PASSWORD=${DB_PASSWORD:-weathernotify}
      - DB_NAME=${DB_NAME:-weathernotify}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - APP_URL=${APP_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure:1
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-weathernotify}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-weathernotify}
      - POSTGRES_DB=${DB_NAME:-weathernotify}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-weathernotify} -d ${DB_NAME:-weathernotify}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data: 